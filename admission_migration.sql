BEGIN;

CREATE TYPE admission_status AS ENUM (
    'request_in_progress', 
    'enrolled', 
    'enrolled_on_other', 
    'recommended_on_other', 
    'failed');

CREATE TABLE abiturients( 
    id integer GENERATED BY DEFAULT AS IDENTITY, 
    email text NOT NULL, 
    password text NOT NULL, 
    token text NOT NULL, 
    is_admin BOOLEAN DEFAULT FALSE, 
    first_name text NOT NULL, 
    second_name text NOT NULL, 
    has_diplom_original boolean NOT NULL DEFAULT FALSE, 
    is_requested boolean NOT NULL DEFAULT FALSE, 
    is_enrolled boolean NOT NULL DEFAULT FALSE, 
    created_at VARCHAR(100) NOT NULL DEFAULT '2024-09-15 13:02:56', 
    updated_at VARCHAR(100) NOT NULL DEFAULT '2024-09-15 13:02:56', 
    CONSTRAINT pk_abiturients PRIMARY KEY (id));

CREATE TABLE directions(
    id integer GENERATED BY DEFAULT AS IDENTITY, 
    caption text NOT NULL, 
    budget_places_number INT NOT NULL, 
    min_ball INT NOT NULL DEFAULT 50, 
    is_filled boolean NOT NULL DEFAULT FALSE, 
    is_finalized boolean NOT NULL DEFAULT FALSE, 
    created_at VARCHAR(100) NOT NULL DEFAULT '2024-09-15 13:02:56', 
    updated_at VARCHAR(100) NOT NULL DEFAULT '2024-09-15 13:02:56', 
    CONSTRAINT pk_directions PRIMARY KEY (id));

CREATE TABLE abiturient_direction_links(
    id integer GENERATED BY DEFAULT AS IDENTITY, 
    abiturient_id integer NOT NULL, 
    direction_id integer NOT NULL, 
    place integer NOT NULL DEFAULT 0, 
    mark integer NOT NULL DEFAULT 0, 
    admission_status admission_status NOT NULL DEFAULT 'request_in_progress', 
    prioritet_number integer NOT NULL DEFAULT 1, 
    has_original_diplom boolean NOT NULL DEFAULT FALSE, 
    created_at VARCHAR(100) NOT NULL DEFAULT '2024-09-15 13:02:56', 
    updated_at VARCHAR(100) NOT NULL DEFAULT '2024-09-15 13:02:56', 
    CONSTRAINT pk_abiturient_directions_link PRIMARY KEY (id), 
    CONSTRAINT fk_abiturient_directions_link_abiturients_abiturient_id 
        FOREIGN KEY (abiturient_id) REFERENCES abiturients (id) 
            ON DELETE CASCADE, 
    CONSTRAINT fk_abiturient_directions_link_directions_direction_id 
        FOREIGN KEY (direction_id) REFERENCES directions (id) 
            ON DELETE CASCADE);

CREATE OR REPLACE FUNCTION check_duplicate_abiturient_direction() 
RETURNS TRIGGER AS $$ BEGIN
IF EXISTS ( SELECT 1 FROM abiturient_directions_link 
WHERE abiturient_id = NEW.abiturient_id AND direction_id = NEW.direction_id ) 
THEN RAISE EXCEPTION 
    'Duplicate entry for abiturient_id % and direction_id %', 
    NEW.abiturient_id, 
    NEW.direction_id; 
END IF;
RETURN NEW; 
END; 
$$ LANGUAGE plpgsql;

CREATE TRIGGER prevent_duplicate_abiturient_direction 
BEFORE INSERT ON abiturient_direction_links 
FOR EACH ROW 
EXECUTE FUNCTION check_duplicate_abiturient_direction();

CREATE OR REPLACE FUNCTION restrict_updates() 
RETURNS TRIGGER AS $$ BEGIN 
IF NEW.abiturient_id != OLD.abiturient_id 
    OR NEW.direction_id != OLD.direction_id 
    OR NEW.place != OLD.place 
    OR NEW.has_original_diplom != OLD.has_original_diplom 
THEN RAISE EXCEPTION 'Only mark, admission_status, and prioritet_number fields can be updated'; 
END IF;
RETURN NEW; 
END; 
$$ LANGUAGE plpgsql;

CREATE TRIGGER restrict_fields_update 
BEFORE UPDATE ON abiturient_direction_links 
FOR EACH ROW 
EXECUTE FUNCTION restrict_updates();

CREATE OR REPLACE FUNCTION update_has_original_diplom() 
RETURNS TRIGGER AS $$ BEGIN
IF NEW.has_diplom_original != OLD.has_diplom_original 
THEN 
UPDATE abiturient_direction_links 
    SET has_original_diplom = NEW.has_diplom_original, 
        updated_at = CURRENT_TIMESTAMP 
    WHERE abiturient_id = NEW.id;
END IF; 
RETURN NEW; 
END; 
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_has_original_diplom 
AFTER UPDATE OF has_diplom_original 
ON abiturients 
FOR EACH ROW 
EXECUTE FUNCTION update_has_original_diplom();

ALTER TABLE abiturient_direction_links RENAME COLUMN has_original_diplom TO has_diplom_original;

COMMIT;